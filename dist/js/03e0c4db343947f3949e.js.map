{"version":3,"file":"js/03e0c4db343947f3949e.js","mappings":"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","sources":["webpack://fausteditorweb/./src/monaco-faust/Faust2Doc.ts","webpack://fausteditorweb/./src/monaco-faust/Faust2MD.ts","webpack://fausteditorweb/./src/monaco-faust/FaustLang.ts"],"sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = { [key: string]: TFaustDoc };\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!line) continue; // empty line\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    inComment = false;\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor\";\nimport { LibFaust } from \"@shren/faustwasm\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\nimport { docSections, faustDocURL } from \"../documentation\";\n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: {}\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"route\", \"waveform\", \"soundfile\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, faust: LibFaust) => {\n    if (faust) return faust.fs().readFile(\"/usr/share/faust/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faustlibraries.grame.fr/libs/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (faust: LibFaust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, faust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, faust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey({ ...primDocs, ...libDocs }, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](${faustDocURL}/${docSections[prefix.slice(0, 2).toString()]}/#${prefix.join(\".\")}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faustdoc.grame.fr/manual/syntax/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"names":["Faust2MD","Faust2Doc","matchLibrary","line","libs","exps","match","RegExp","REGEX_DEF_LIB","forEach","exp","matched","push","namespace","fileName","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","length","subCond","parse","getFile","depthIn","pathIn","docIn","depth","strIn","doc","path","inComment","idt","curName","strBuffer","lines","split","i","isComment","name","concat","join","j","lib","imp","indentation","endC","matchEndComment","endS","matchEndSection","endT","matchEndTitle","outdent","c","matchBeginComment","s","matchBeginSection","t","matchBeginTitle","frontMatter","Date","toLocaleDateString","substr","REGEX_BEG_TITLE","REGEX_END_TITLE","REGEX_BEG_SECTION","REGEX_END_SECTION","REGEX_BEG_COMMENT","REGEX_END_COMMENT","REGEX_INDENT","REGEX_COMMENT","optionsIn","options","tabsize","code","front","strOut","languages","Position","Range","docSections","faustDocURL","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","faust","fs","readFile","encoding","libPath","fetch","res","text","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","nameArray","e","range","endColumn","getProviders","libDocs","primDocs","console","error","faustLib","Object","keys","hoverProvider","provideHover","prefix","slice","pop","contents","value","toString","toLowerCase","tokensProvider","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","next","comment","string","whitespace","completionItemProvider","provideCompletionItems","suggestions","label","kind","CompletionItemKind","Text","insertText","docs"],"sourceRoot":""}