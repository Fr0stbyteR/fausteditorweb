{"version":3,"sources":["webpack:///./src/monaco-faust/Faust2Doc.ts","webpack:///./src/monaco-faust/Faust2MD.ts","webpack:///./src/monaco-faust/FaustLang.ts"],"names":["Faust2Doc","matchLibrary","line","libs","exps","match","RegExp","REGEX_DEF_LIB","forEach","exp","matched","push","namespace","fileName","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","length","subCond","parse","getFile","depthIn","pathIn","docIn","depth","strIn","doc","path","inComment","idt","curName","strBuffer","lines","split","i","Faust2MD","isComment","j","lib","imp","indentation","endC","matchEndComment","endS","matchEndSection","endT","matchEndTitle","outdent","name","concat","join","c","matchBeginComment","s","matchBeginSection","t","matchBeginTitle","frontMatter","Date","toLocaleDateString","substr","REGEX_BEG_TITLE","REGEX_END_TITLE","REGEX_BEG_SECTION","REGEX_END_SECTION","REGEX_BEG_COMMENT","REGEX_END_COMMENT","REGEX_INDENT","REGEX_COMMENT","optionsIn","options","tabsize","code","front","strOut","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","faust","fs","readFile","encoding","libPath","fetch","res","text","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","Position","nameArray","e","range","Range","endColumn","getProviders","libDocs","primDocs","console","error","faustLib","Object","keys","hoverProvider","provideHover","prefix","slice","pop","contents","value","toLowerCase","tokensProvider","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","next","comment","string","whitespace","completionItemProvider","provideCompletionItems","suggestions","label","kind","languages","CompletionItemKind","Text","insertText","docs"],"mappings":"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","file":"js/c9bc977960e6a6f7c7bf.js","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = { [key: string]: TFaustDoc };\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) inComment = false; // we are closing a md-comment\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { Faust } from \"faust2webaudio\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: null\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, faust: Faust) => {\n    if (faust) return faust.fs.readFile(\"libraries/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faust.grame.fr/tools/editor/libraries/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (faust: Faust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, faust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, faust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey({ ...primDocs, ...libDocs }, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](https://faust.grame.fr/doc/libraries/#${prefix.join(\".\") + \".\"}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faust.grame.fr/doc/manual/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"sourceRoot":""}